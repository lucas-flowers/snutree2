from typing import Generic, Iterable, Iterator, TypeVar, Union, overload

# pylint: disable=unused-argument,multiple-statements

T = TypeVar("T")

class DiGraph(Generic[T]):
    def subgraph(self, nodes: Iterable[T]) -> "DiGraph[T]": ...
    def add_nodes_from(self, nodes_for_adding: Iterable[T]) -> None: ...
    def add_edges_from(self, ebunch_to_add: Iterable[tuple[T, T]]) -> None: ...
    @property
    def nodes(self) -> Iterable[T]: ...
    def edges(self) -> Iterable[tuple[T, T]]: ...
    @overload
    def in_degree(self) -> Iterator[tuple[T, int]]: ...
    @overload
    def in_degree(self, nbunch: T) -> int: ...
    def add_edge(self, u_of_edge: T, v_of_edge: T) -> None: ...
    def add_node(self, node_for_adding: T) -> None: ...

def weakly_connected_components(G: DiGraph[T]) -> Iterable[set[T]]: ...
def tree_all_pairs_lowest_common_ancestor(G: DiGraph[T]) -> tuple[tuple[T, T], T]: ...
